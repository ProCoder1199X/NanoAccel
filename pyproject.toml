[build-system]
requires = ["setuptools>=61.0", "wheel", "setuptools-scm>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "nanoaccel"
version = "0.2.0"
authors = [
    { name = "Dheeraj Kumar", email = "dheeraj.kumar@example.com" }
]
description = "Advanced CPU-optimized LLM inference library with speculative decoding, dynamic quantization, and intelligent caching"
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.8"
keywords = [
    "llm", "inference", "cpu", "optimization", "quantization", 
    "speculative-decoding", "transformers", "ai", "ml", 
    "natural-language-processing", "performance"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Hardware",
]

dependencies = [
    "torch>=2.0.0,<3.0.0",
    "transformers>=4.35.0,<5.0.0",
    "accelerate>=0.24.0,<1.0.0",
    "bitsandbytes>=0.41.0,<1.0.0",
    "psutil>=5.9.0,<6.0.0",
    "PyYAML>=6.0,<7.0",
    "numpy>=1.21.0,<2.0.0",
    "tqdm>=4.65.0,<5.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock>=3.12.0,<4.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "black>=23.11.0,<24.0.0",
    "flake8>=6.1.0,<7.0.0",
    "mypy>=1.7.0,<2.0.0",
    "pre-commit>=3.5.0,<4.0.0",
    "isort>=5.12.0,<6.0.0",
    "pyupgrade>=3.15.0,<4.0.0",
    "codespell>=2.2.0,<3.0.0",
    "bandit>=1.7.5,<2.0.0",
    "safety>=2.3.0,<3.0.0",
]

test = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock>=3.12.0,<4.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-benchmark>=4.0.0,<5.0.0",
]

api = [
    "fastapi>=0.104.0,<1.0.0",
    "uvicorn[standard]>=0.24.0,<1.0.0",
    "pydantic>=2.5.0,<3.0.0",
]

docs = [
    "mkdocs>=1.5.0,<2.0.0",
    "mkdocs-material>=9.4.0,<10.0.0",
    "mkdocstrings[python]>=0.24.0,<1.0.0",
]

all = [
    "nanoaccel[dev,test,api,docs]",
]

[project.scripts]
nanoaccel = "nanoaccel.cli:main"

[project.urls]
Homepage = "https://github.com/ProCoder1199X/NanoAccel"
Repository = "https://github.com/ProCoder1199X/NanoAccel.git"
Issues = "https://github.com/ProCoder1199X/NanoAccel/issues"
Documentation = "https://github.com/ProCoder1199X/NanoAccel#readme"
Changelog = "https://github.com/ProCoder1199X/NanoAccel/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["."]
include = ["nanoaccel*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
nanoaccel = ["*.yaml", "*.yml", "*.json", "py.typed"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*", "*/build/*", "*/dist/*"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "transformers.*",
    "bitsandbytes.*",
    "accelerate.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=nanoaccel",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=85",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as benchmark tests",
    "gpu: marks tests requiring GPU",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["nanoaccel"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "test", ".venv", "venv"]
skips = ["B101", "B601"]

[tool.pylint.messages_control]
disable = [
    "C0103",  # Invalid name
    "C0114",  # Missing module docstring
    "R0913",  # Too many arguments
    "R0914",  # Too many local variables
]

[tool.pylint.format]
max-line-length = 88

[tool.ruff]
line-length = 88
target-version = "py38"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.setuptools_scm]
write_to = "nanoaccel/_version.py"
version_scheme = "post-release"
local_scheme = "no-local-version"
